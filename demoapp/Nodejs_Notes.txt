***********************************************************************
Problems with JavaScript

No control over the variables?
Variables can be modified to any variables. 

TypeScript = JavaScript + Types;

TypeScript takes care of browser compatability with the new features that has in JavaScript.

Makes building these comples apps more manageable.
Frameworks like Angular2, ReactJS is using it. 

***********************************************************************
Setting up TypeScript
Recomended IDE is Microsoft Visual Studio Code
Install NodeJS ( to run the TypeScript compiler & then to run the JavaScript)
Install TypeScript compiler 
npm install typescript ( default is to install typescript LOCALLY to that specific folder )

To install globally add "-g" 
npm install typescript -g 
***********************************************************************

To compile typescript
tsc xxxxxx.ts   ( this comverts typescript ts to JavaScript js)

To execute using nodejs 
nodejs xxxxxx.js

We can run both together 
tsc xxxxxx.ts && nodejs xxxxxx.js

To name the OUTPUT of tsc to your own js file 
tsc xxxxxx.ts --out userdefined.js 

To continuously to keep watching the changes 
tsc xxx.ts --watch

tsc xxx.ts --out userdefined.js --watch

To know more about the command line arguments use this below command 
tsc -help


var myArr : number[]
myArr = [];
myArr = [1,2,3,4,5];
myArr = ['qwery']  myArr = 1 // compilation error

//tuple
var anotherArray : [number, boolean];
anotherArray = [1, true];
anotherArray = [200, false];

Check javabrains_exaples.ts file for more real world code and implementations
TypeScript file gives / shows an upfront errors to user BUT still generates JS behind the scenes even if there is an exception

optional arguments num3?:number 
Optional argument and having a default value num3:number = 0 

Implicit typing 
var kk = 100; 
kk = true // this doesnt work thows an exception ( implicit typing kk is internally assigned as kk: number)

If you want any type has to be handled then assign it to kk:any 
var greetVariable = greet(); // Implicit typing is String
var greetVariable2;
greetVariable2 = greet(); // Implicit typing is any if you did not assign at the same level

var a: number | boolean; // a takes the TYPE of number OR boolean; 

Classes Interfaces Polymorphism 
    // As we cannot have a over loaded functions in the typescript 
    // similarly we cannot have a overloaded constructor 
    // ONLY 1 function is allowed

var fooObj: Foo = new Foo();

let someObj = {
    firstName: "testFirstName",
    lastName: "testLastName",
    getFullName: () => "giving you test names"
}

fooObj = someObj; // This works completely fine 
// because the structure / syntax looks exactly the same
// THIS IS CALLED DUCK TYPING
console.log(fooObj.getFullName());    
